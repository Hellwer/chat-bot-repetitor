from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from utils.text_manager import get_user_texts
from keyboards.learn_menu import learn_menu_kb
from keyboards.main_menu import main_menu_kb

router = Router()

class LearnTextState(StatesGroup):
    choosing_text = State()
    choosing_split = State()
    learning = State()

@router.message(F.text == "–£—á–∏—Ç—å")
async def choose_text_to_learn(message: types.Message, state: FSMContext):
    texts = get_user_texts(message.from_user.id)
    if not texts:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤.")
        return

    response = "üìñ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b>\n"
    for idx, text_data in enumerate(texts, 1):
        first_line = text_data['text'].split('\n')[0]
        response += f"{idx}. {first_line}\n"

    await message.answer(response)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—å:")
    await state.set_state(LearnTextState.choosing_text)

@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(LearnTextState.choosing_text, F.text.func(lambda text: text.isdigit()))
async def receive_text_choice(message: types.Message, state: FSMContext):
    selected_number = int(message.text) - 1
    texts = get_user_texts(message.from_user.id)

    if 0 <= selected_number < len(texts):
        await state.update_data(selected_text=selected_number)
        await message.answer("–ö–∞–∫ —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç?", reply_markup=learn_menu_kb())
        await state.set_state(LearnTextState.choosing_split)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(LearnTextState.choosing_split, F.text.in_(["–ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º", "–ø–æ –∞–±–∑–∞—Ü–∞–º"]))
async def start_learning(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    split_method = message.text
    selected_text_index = user_data['selected_text']
    texts = get_user_texts(message.from_user.id)
    selected_text = texts[selected_text_index]['text']

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    if split_method == "–ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º":
        parts = selected_text.split('. ')
    else:
        parts = selected_text.split('\n\n')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(text_parts=parts, current_part=0)
    await message.answer("‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ!")
    await send_next_part(message, state)

    await state.set_state(LearnTextState.learning)

async def send_next_part(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    current_part = user_data['current_part']
    text_parts = user_data['text_parts']

    if current_part < len(text_parts):
        await message.answer(f"üìö {text_parts[current_part]}")
        await state.update_data(current_part=current_part + 1)
    else:
        await message.answer("üéâ –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞!", reply_markup=main_menu_kb())
        await state.clear()

@router.message(LearnTextState.choosing_text, F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def cancel_choosing_text(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_kb())

@router.message(LearnTextState.choosing_split, F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def cancel_choosing_split(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_kb())

@router.message(LearnTextState.learning, F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def cancel_learning(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu_kb())

@router.message(LearnTextState.learning)
async def continue_learning(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    await send_next_part(message, state)
