from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.texts_menu import texts_menu_kb
from keyboards.main_menu import main_menu_kb
from utils.text_manager import get_user_texts, add_user_text

router = Router()

class AddTextState(StatesGroup):
    waiting_for_text = State()

class TextsState(StatesGroup):
    waiting_for_text_number = State()

@router.message(F.text == "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤")
async def show_texts_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=texts_menu_kb()
    )

@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(F.text == "–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç")
async def add_text(message: types.Message, state: FSMContext):
    await message.answer("üìÑ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –≤—ã—É—á–∏—Ç—å:")
    await state.set_state(AddTextState.waiting_for_text)

@router.message(AddTextState.waiting_for_text)
async def receive_text(message: types.Message, state: FSMContext):
    add_user_text(message.from_user.id, message.text)
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu_kb())
    await state.clear()

@router.message(F.text == "–ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç–∞–º")
async def list_texts(message: types.Message, state: FSMContext):
    texts = get_user_texts(message.from_user.id)
    if not texts:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤.")
        return

    response = "üìÑ <b>–í–∞—à–∏ —Ç–µ–∫—Å—Ç—ã:</b>\n"
    for idx, text_data in enumerate(texts, 1):
        first_line = text_data['text'].split('\n')[0]
        response += f"{idx}. {first_line}\n"

    await message.answer(response)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ.")
    await state.set_state(TextsState.waiting_for_text_number)

@router.message(AddTextState.waiting_for_text, F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def cancel_adding_text(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())

@router.message(TextsState.waiting_for_text_number)
async def show_selected_text(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞.")
        return

    selected_number = int(message.text) - 1
    texts = get_user_texts(message.from_user.id)

    if 0 <= selected_number < len(texts):
        selected_text = texts[selected_number]['text']
        await message.answer(f"üìÑ <b>–¢–µ–∫—Å—Ç {selected_number + 1}:</b>\n\n{selected_text}")
        await state.clear()
    else:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
